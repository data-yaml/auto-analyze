_yaml:
  app: collab-as-code
  app_version: 0.1.0
  doc: auto-analyze
  doc_version: 0.1.0
env:
  AWS_ACCOUNT: CDK_DEFAULT_ACCOUNT
  AWS_REGION: 
    - CDK_DEFAULT_REGION
    - us-east-1
  APP_NAME:
    - AA_APP_NAME
    - AutoAnalyze
  READY2RUN_ID:
    - AA_READY2RUN_ID
    - 9500764
  SERVICE_EVENTS: 
    - SERVICE_EVENTS
    - events.amazonaws.com
  SERVICE_OMICS: 
    - SERVICE_OMICS
    - omics.amazonaws.com
name:
  TOPIC:
    $join._:
      - $ref: "#/env/APP_NAME"
      - workflow
      - status
      - topic
resources:
  bucketInput:
    api: s3
    call: Bucket
    name:
      $join.-:
        - $ref: "#/env/APP_NAME"
        - cka
        - input
        - $ref: "#/env/AWS_ACCOUNT"
        - $ref: "#/env/AWS_REGION"
    options:
      enforceSSL: true
  bucketOutput:
    api: s3
    call: Bucket
    name:
      $join.-:
        - $ref: "#/env/APP_NAME"
        - cka
        - output
        - $ref: "#/env/AWS_ACCOUNT"
        - $ref: "#/env/AWS_REGION"
    options:
      _enforceSSL: true
  snsTopic:
    api: sns
    call: Topic
    name:
      $ref: "#/name/TOPIC"
    options:
      displayName:
        $ref: "#/name/TOPIC"
      topicName:
        $ref: "#/name/TOPIC"
    post:
      grantPublish:
        $new:
          api: iam
          call: ServicePrincipal
          value:
            $ref: "#/env/SERVICE_EVENTS"

  ruleWorkflowStatusTopic:
    api: events
    call: Rule
    name:
      $join._:
        - $ref: "#/env/APP_NAME"
        - rule
        - workflow
        - status
        - topic
    options:
      eventPattern:
        source:
          - aws.omics
        detailType:
          - Run Status Change
        detail:
          status:
            - FAILED
    post:
      addTarget:
        $new:
          api: targets
          call: SnsTopic
          value: 
            $ref: "#/resources/snsTopic"
  omicsRole:
    api: iam
    call: Role
    name:
      $join.-:
        - $ref: "#/env/APP_NAME"
        - omics
        - service
        - role
    options:
      assumedBy:
        $new:
          api: iam
          call: ServicePrincipal
          value:
            $ref: "#/env/SERVICE_OMICS"
  omicsS3ReadPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - "s3:ListBucket"
        - "s3:GetObject"
      resources:
        - $ref: "#/resources/bucketInput/arn"
        - $ref: "#/resources/bucketOutput/arn"
        - $join:
            - $ref: "#/resources/bucketInput/arn"
            - /*
        - $join:
            - $ref: "#/resources/bucketOutput/arn"
            - /*
    reverse:  # omicsRole.addToPolicy(omicsS3ReadPolicy);
      addToPolicy:
        $ref: "#/resources/omicsRole"
  omicsS3WritePolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - "s3:ListBucket"
        - "s3:PutObject"
      resources:
        - $ref: "#/resources/bucketOutput/arn"
        - $join:
            - $ref: "#/resources/bucketOutput/arn"
            - /*
    reverse:  # omicsRole.addToPolicy(omicsS3WritePolicy);
      addToPolicy:
        $ref: "#/resources/omicsRole"
  omicsEcrPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - "ecr:BatchGetImage"
        - "ecr:GetDownloadUrlForLayer"
        - "ecr:BatchCheckLayerAvailability"
      resources:
        "$join.:":
          - "arn:aws:ecr"
          - $ref: "#/env/AWS_REGION"
          - $ref: "#/env/AWS_ACCOUNT"
          - repository/*
    reverse:  # omicsRole.addToPolicy(omicsS3WritePolicy);
      addToPolicy:
        $ref: "#/resources/omicsRole"
  omicsLoggingPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - "logs:CreateLogGroup"
        - "logs:DescribeLogStreams"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      resources:
        - "$join.:":
            - "arn:aws:logs"
            - $ref: "#/env/AWS_REGION"
            - $ref: "#/env/AWS_ACCOUNT"
            - "log-group:/aws/omics/WorkflowLog:log-stream:*"
        - $join:
            - "arn:aws:logs"
            - $ref: "#/env/AWS_REGION"
            - $ref: "#/env/AWS_ACCOUNT"
            - "log-group:/aws/omics/WorkflowLog:*"
    reverse:
      addToPolicy:
        $ref: "#/resources/omicsRole"
  omicsKmsPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - "kms:Decrypt"
        - "kms:GenerateDataKey"
      resources:
        - "*"
    reverse:
      addToPolicy:
        $ref: "#/resources/omicsRole"
  omicsRoleAdditionalPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - "s3:Get*"
        - "s3:List*"
      resources:
        - "arn:aws:s3:::broad-references"
        - "arn:aws:s3:::broad-references/*"
        - "arn:aws:s3:::giab"
        - "arn:aws:s3:::giab/*"
        - $join:
            - "arn:aws:s3:::aws-genomics-static-"
            - $ref: "#/env/AWS_REGION"
        - $join:
            - "arn:aws:s3:::aws-genomics-static-"
            - $ref: "#/env/AWS_REGION"
            - "/*"
        - $join:
            - "arn:aws:s3:::omics-"
            - $ref: "#/env/AWS_REGION"
        - $join:
            - "arn:aws:s3:::omics-"
            - $ref: "#/env/AWS_REGION"
            - "/*"
    reverse:
      addToPolicy:
        $ref: "#/resources/omicsRole"
    // Allow Omics service role to access some common public AWS S3 buckets with test data

    // Create an IAM role for the Lambda functions
    const lambdaRole = new iam.Role(this, `${APP_NAME}-lambda-role`, {
      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole')
      ]
    });

    // Allow the Lambda functions to pass Omics service role to the Omics service
    const lambdaIamPassrolePolicy = new iam.PolicyStatement({
      actions: ['iam:PassRole'],
      resources: [omicsRole.roleArn]
    });
    lambdaRole.addToPolicy(lambdaIamPassrolePolicy);

    const lambdaS3Policy = new iam.PolicyStatement({
      actions: ['s3:ListBucket', 's3:GetObject', 's3:PutObject'],
      resources: [
        bucketInput.bucketArn,
        bucketOutput.bucketArn,
        bucketInput.bucketArn + '/*',
        bucketOutput.bucketArn + '/*'
      ]
    });
    lambdaRole.addToPolicy(lambdaS3Policy);

    const lambdaOmicsPolicy = new iam.PolicyStatement({
      actions: ['omics:StartRun', 'omics:TagResource', 'omics:GetRun'],
      resources: ['*']
    });
    lambdaRole.addToPolicy(lambdaOmicsPolicy);

    // Create Lambda function to submit initial HealthOmics workflow
    const initialWorkflowLambda = new lambda.Function(this, `${APP_NAME}_initial_workflow_lambda`, {
      runtime: lambda.Runtime.PYTHON_3_8,
      handler: 'initial_workflow_lambda_handler.handler',
      code: lambda.Code.fromAsset('lambda_function/initial_workflow_lambda'),
      role: lambdaRole,
      timeout: cdk.Duration.seconds(60),
      retryAttempts: 1,
      environment: {
        'OMICS_ROLE': omicsRole.roleArn,
        'OUTPUT_S3_LOCATION': 's3://' + bucketOutput.bucketName + '/outputs',
        'WORKFLOW_ID': READY2RUN_WORKFLOW_ID,
        'ECR_REGISTRY': AWS_ACCOUNT + '.dkr.ecr.' + AWS_REGION + '.amazonaws.com',
        'LOG_LEVEL': 'INFO'
      }
    });

    // Add S3 event source to Lambda
    initialWorkflowLambda.addEventSource(new lambdaEventSources.S3EventSource(
        bucketInput,
        { events: [s3.EventType.OBJECT_CREATED], filters: [{ prefix: 'fastqs/', suffix: '.csv' }] }
      ));
    // Create Lambda function to submit second Omics pipeline
    const secondWorkflowLambda = new lambda.Function(this, `${APP_NAME}_post_initial_workflow_lambda`, {
      runtime: lambda.Runtime.PYTHON_3_8,
      handler: 'post_initial_workflow_lambda_handler.handler',
      code: lambda.Code.fromAsset('lambda_function/post_initial_workflow_lambda'),
      role: lambdaRole,
      timeout: cdk.Duration.seconds(60),
      retryAttempts: 1,
      environment: {
        'OMICS_ROLE': omicsRole.roleArn,
        'OUTPUT_S3_LOCATION': 's3://' + bucketOutput.bucketName + '/outputs',
        'UPSTREAM_WORKFLOW_ID': READY2RUN_WORKFLOW_ID,
        'ECR_REGISTRY': AWS_ACCOUNT + '.dkr.ecr.' + AWS_REGION + '.amazonaws.com',
        'SPECIES': 'homo_sapiens',
        'DIR_CACHE': `s3://aws-genomics-static-${AWS_REGION}/omics-tutorials/data/databases/vep/`,
        'CACHE_VERSION': '110',
        'GENOME': 'GRCh38',
        'LOG_LEVEL': 'INFO'
      }
    });

    // Create an EventBridge rule that triggers lambda2
    const ruleSecondWorkflowLambda = new events.Rule(this, `${APP_NAME}_rule_second_workflow_lambda`, {
      eventPattern: {
        source: ['aws.omics'],
        detailType: ['Run Status Change'],
        detail: {
          status: ['COMPLETED']
        }
      }
    });
    ruleSecondWorkflowLambda.addTarget(new targets.LambdaFunction(secondWorkflowLambda));
  }
}
