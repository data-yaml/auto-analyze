---
_yaml:
  app: collab-as-code
  app_version: 0.1.0
  doc: auto-analyze
  doc_version: 0.1.0
env:
  AWS_ACCOUNT:
    - CDK_DEFAULT_ACCOUNT
  AWS_REGION:
    - CDK_DEFAULT_REGION
    - us-east-1
  APP_NAME: AutoAnalyze
  READY2RUN_ID: 9500764
  SERVICE_EVENTS: events.amazonaws.com
  SERVICE_OMICS: omics.amazonaws.com
  SERVICE_LAMBDA: lambda.amazonaws.com
name:
  TOPIC:
    $join._:
      - $ref: '#/env/APP_NAME'
      - workflow
      - status
      - topic
resources:
  bucketInput:
    api: s3
    call: Bucket
    name:
      $join.-:
        - $ref: '#/env/APP_NAME'
        - cka
        - input
        - $ref: '#/env/AWS_ACCOUNT'
        - $ref: '#/env/AWS_REGION'
    options:
      enforceSSL: true
  bucketOutput:
    api: s3
    call: Bucket
    name:
      $join.-:
        - $ref: '#/env/APP_NAME'
        - cka
        - output
        - $ref: '#/env/AWS_ACCOUNT'
        - $ref: '#/env/AWS_REGION'
    options:
      _enforceSSL: true
  snsTopic:
    api: sns
    call: Topic
    name:
      $ref: '#/name/TOPIC'
    options:
      displayName:
        $ref: '#/name/TOPIC'
      topicName:
        $ref: '#/name/TOPIC'
    post:
      grantPublish:
        $new:
          api: iam
          call: ServicePrincipal
          value:
            $ref: '#/env/SERVICE_EVENTS'
  ruleWorkflowStatusTopic:
    api: events
    call: Rule
    name:
      $join._:
        - $ref: '#/env/APP_NAME'
        - rule
        - workflow
        - status
        - topic
    options:
      eventPattern:
        source:
          - aws.omics
        detailType:
          - Run Status Change
        detail:
          status:
            - FAILED
    post:
      addTarget:
        $new:
          api: targets
          call: SnsTopic
          value:
            $ref: '#/resources/snsTopic'
  omicsRole:
    api: iam
    call: Role
    name:
      $join.-:
        - $ref: '#/env/APP_NAME'
        - omics
        - service
        - role
    options:
      assumedBy:
        $new:
          api: iam
          call: ServicePrincipal
          value:
            $ref: '#/env/SERVICE_OMICS'
  omicsS3ReadPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - 's3:ListBucket'
        - 's3:GetObject'
      resources:
        - $ref: '#/resources/bucketInput/arn'
        - $ref: '#/resources/bucketOutput/arn'
        - $join:
            - $ref: '#/resources/bucketInput/arn'
            - /*
        - $join:
            - $ref: '#/resources/bucketOutput/arn'
            - /*
    reverse: # omicsRole.addToPolicy(omicsS3ReadPolicy);
      addToPolicy:
        $ref: '#/resources/omicsRole'
  omicsS3WritePolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - 's3:ListBucket'
        - 's3:PutObject'
      resources:
        - $ref: '#/resources/bucketOutput/arn'
        - $join:
            - $ref: '#/resources/bucketOutput/arn'
            - /*
    reverse: # omicsRole.addToPolicy(omicsS3WritePolicy);
      addToPolicy:
        $ref: '#/resources/omicsRole'
  omicsEcrPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - 'ecr:BatchGetImage'
        - 'ecr:GetDownloadUrlForLayer'
        - 'ecr:BatchCheckLayerAvailability'
      resources:
        '$join.:':
          - 'arn:aws:ecr'
          - $ref: '#/env/AWS_REGION'
          - $ref: '#/env/AWS_ACCOUNT'
          - repository/*
    reverse: # omicsRole.addToPolicy(omicsS3WritePolicy);
      addToPolicy:
        $ref: '#/resources/omicsRole'
  omicsLoggingPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - 'logs:CreateLogGroup'
        - 'logs:DescribeLogStreams'
        - 'logs:CreateLogStream'
        - 'logs:PutLogEvents'
      resources:
        - '$join.:':
            - 'arn:aws:logs'
            - $ref: '#/env/AWS_REGION'
            - $ref: '#/env/AWS_ACCOUNT'
            - 'log-group:/aws/omics/WorkflowLog:log-stream:*'
        - $join:
            - 'arn:aws:logs'
            - $ref: '#/env/AWS_REGION'
            - $ref: '#/env/AWS_ACCOUNT'
            - 'log-group:/aws/omics/WorkflowLog:*'
    reverse:
      addToPolicy:
        $ref: '#/resources/omicsRole'
  omicsKmsPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - 'kms:Decrypt'
        - 'kms:GenerateDataKey'
      resources:
        - '*'
    reverse:
      addToPolicy:
        $ref: '#/resources/omicsRole'
  omicsRoleAdditionalPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - 's3:Get*'
        - 's3:List*'
      resources:
        - 'arn:aws:s3:::broad-references'
        - 'arn:aws:s3:::broad-references/*'
        - 'arn:aws:s3:::giab'
        - 'arn:aws:s3:::giab/*'
        - $join:
            - 'arn:aws:s3:::aws-genomics-static-'
            - $ref: '#/env/AWS_REGION'
        - $join:
            - 'arn:aws:s3:::aws-genomics-static-'
            - $ref: '#/env/AWS_REGION'
            - '/*'
        - $join:
            - 'arn:aws:s3:::omics-'
            - $ref: '#/env/AWS_REGION'
        - $join:
            - 'arn:aws:s3:::omics-'
            - $ref: '#/env/AWS_REGION'
            - '/*'
    reverse:
      addToPolicy:
        $ref: '#/resources/omicsRole'
  lambdaRole:
    api: iam
    call: Role
    name:
      $join.-:
        - $ref: '#/env/APP_NAME'
        - lambda
        - role
    options:
      assumedBy:
        $new:
          api: iam
          call: ServicePrincipal
          value:
            - lambda.amazonaws.com
      managedPolicies:
        $call:
          api: iam
          call: ManagedPolicy.fromAwsManagedPolicyName
          value: service-role/AWSLambdaBasicExecutionRole
  lambdaIamPassrolePolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - iam:PassRole
      resources:
        - $ref: '#/resources/omicsRole/arn'
    reverse:
      addToPolicy:
        $ref: '#/resources/lambdaRole'
  lambdaS3Policy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - 's3:ListBucket'
        - 's3:GetObject'
        - 's3:PutObject'
      resources:
        - $ref: '#/resources/bucketInput/arn'
        - $ref: '#/resources/bucketOutput/arn'
        - $join:
            - $ref: '#/resources/bucketInput/arn'
            - /*
        - $join:
            - $ref: '#/resources/bucketOutput/arn'
            - /*
    reverse:
      addToPolicy:
        $ref: '#/resources/lambdaRole'
  lambdaOmicsPolicy:
    api: iam
    call: PolicyStatement
    options:
      actions:
        - 'omics:StartRun'
        - 'omics:TagResource'
        - 'omics:GetRun'
      resources:
        - '*'
    reverse:
      addToPolicy:
        $ref: '#/resources/lambdaRole'
  lambdaEventSources:
    api: lambda
    call: EventSourceMapping
    options:
      batchSize: 1
      eventSourceArn:
        $ref: '#/resources/bucketInput/arn'
      startingPosition: LATEST
  initialWorkflowLambda:
    api: lambda
    call: Function
    name:
      $join.-:
        - $ref: '#/env/APP_NAME'
        - initial
        - workflow
        - lambda
    options:
      runtime: lambda.Runtime.PYTHON_3_8
      handler: initial_workflow_lambda_handler.handler
      code:
        $new:
          api: lambda
          call: Code.fromAsset
          value: lambda_function/initial_workflow_lambda
      role:
        $ref: '#/resources/lambdaRole'
      timeout: 60
      retryAttempts: 1
      environment:
        OMICS_ROLE:
          $ref: '#/resources/omicsRole/arn'
        OUTPUT_S3_LOCATION:
          $join.:
            - s3://
            - $ref: '#/resources/bucketOutput/name'
            - /outputs
        WORKFLOW_ID:
          $ref: '#/env/READY2RUN_ID'
        ECR_REGISTRY:
          $join.:
            - $ref: '#/env/AWS_ACCOUNT'
            - .dkr.ecr.
            - $ref: '#/env/AWS_REGION'
            - .amazonaws.com
        LOG_LEVEL: INFO
    post:
      addEventSource:
        $new:
          api: lambda
          call: EventSourceMapping
          value:
            $ref: '#/resources/lambdaEventSources'
  secondWorkflowLambda:
    api: lambda
    call: Function
    name:
      $join.-:
        - $ref: '#/env/APP_NAME'
        - post
        - initial
        - workflow
        - lambda
    options:
      runtime: lambda.Runtime.PYTHON_3_8
      handler: post_initial_workflow_lambda_handler.handler
      code:
        $new:
          api: lambda
          call: Code.fromAsset
          value: lambda_function/post_initial_workflow_lambda
      role:
        $ref: '#/resources/lambdaRole'
      timeout: 60
      retryAttempts: 1
      environment:
        OMICS_ROLE:
          $ref: '#/resources/omicsRole/arn'
        OUTPUT_S3_LOCATION:
          $join.:
            - s3://
            - $ref: '#/resources/bucketOutput/name'
            - /outputs
        UPSTREAM_WORKFLOW_ID:
          $ref: '#/env/READY2RUN_ID'
        ECR_REGISTRY:
          $join..:
            - $ref: '#/env/AWS_ACCOUNT'
            - dkr.ecr
            - $ref: '#/env/AWS_REGION'
            - amazonaws.com
        SPECIES: homo_sapiens
        DIR_CACHE:
          $join:
            - 's3://aws-genomics-static-'
            - $ref: '#/env/AWS_REGION'
            - /omics-tutorials/data/databases/vep/
        CACHE_VERSION: 110
        GENOME: GRFh38
        LOG_LEVEL: INFO
  ruleSecondWorkflowLambda:
    api: events
    call: Rule
    name:
      $join._:
        - $ref: '#/env/APP_NAME'
        - rule_second_workflow_lambda
    options:
      eventPattern:
        source:
          - aws.omics
        detailType:
          - Run Status Change
        detail:
          status:
            - COMPLETED
    post:
      addTarget:
        $new:
        api: targets
        call: LambdaFunction
        value:
          $ref: '#/resources/secondWorkflowLambda'
